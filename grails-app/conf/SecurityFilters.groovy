/*
    Copyright 2015 Australian National Botanic Gardens

    This file is part of NSL services project.

    Licensed under the Apache License, Version 2.0 (the "License"); you may not
    use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */

import au.org.biodiversity.nsl.ApiKeyToken
import au.org.biodiversity.nsl.JsonToken
import org.apache.shiro.SecurityUtils
import org.apache.shiro.authc.AuthenticationException
import org.codehaus.groovy.grails.web.util.WebUtils

import static org.springframework.http.HttpStatus.*

class SecurityFilters {
    def filters = {

        all(uri: "/**") {
            before = {

                //need the .format to get a good response in case of errors
                String requested = (WebUtils.getForwardURI(request) ?: request.getAttribute('javax.servlet.error.request_uri'))
                requested = requested.decodeURL()

                if (requested.endsWith('.json')) {
                    params.format = 'json'
                }
                if (requested.endsWith('.xml')) {
                    params.format = 'xml'
                }
                if (requested.endsWith('.html')) {
                    params.format = 'html'
                }

                //if an apiKey is set then login with it
                if (params.apiKey) {
                    try {
                        String apiKey = params.remove('apiKey')
                        ApiKeyToken authToken = new ApiKeyToken(apiKey, null as char[], SecurityUtils.subject.host as String)
                        Long start = System.currentTimeMillis()
                        SecurityUtils.subject.login(authToken)
                        log.debug "login took ${System.currentTimeMillis() - start}ms"
                        return true
                    } catch (AuthenticationException e) {
                        log.info e.message
                        redirect(controller: 'auth', action: 'unauthorized', params: [format: params.format])
                        return false
                    }
                }

                // if a JSON token is set then log in with that, also
                // add CORS stamp to the response to indicate that we are ok
                // with nsl-jwt being passed as a header
                if(request.getHeader('nsl-jwt')) {
                    try {
                        response.setHeader('Access-Control-Allow-Origin', '*')
                        response.addHeader('Access-Control-Allow-Header', 'nsl-jwt')

                        String jwt = request.getHeader('nsl-jwt')
                        JsonToken jsonToken = JsonToken.buildUsingCredentials(jwt)
                        Long start = System.currentTimeMillis()
                        SecurityUtils.subject.login(jsonToken)
                        log.debug "json token processing took ${System.currentTimeMillis() - start}ms"
                        return true
                    } catch (AuthenticationException e) {
                        log.info e.message
                        redirect(controller: 'auth', action: 'unauthorized', params: [format: params.format])
                        return false
                    }
                }

            }
        }

        notApi(uri: "/**") {
            before = {
                if (controllerName && controllerName =~ /(admin)/) {
                    accessControl(auth: true) {
                        //stop access to edit and delete in the base actions for now.
                        !actionName.equals('delete') && !actionName.equals('edit')
                    }
                } else {
                    return true
                }
            }
        }
    }
}
